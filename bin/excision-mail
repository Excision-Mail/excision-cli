#!/usr/bin/env python3

import argparse
import configparser
import logging
import sys
import typing
from getpass import getpass
from os.path import exists
from pathlib import Path

from excision_mail.config import check_conf
from excision_mail.errors import RedundantOperation
from excision_mail.pgp import pgp_setup
from excision_mail.user import (account_info, alias_add, alias_allow,
                                alias_delete, alias_deny, alias_disable,
                                alias_enable, change_passwd, user_add,
                                user_delete, user_disable, user_enable)
from excision_mail.zone import zone_check, zone_setup

parser = argparse.ArgumentParser(
    description='Excision Mail admin interface',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-c',
                    type=str,
                    default='/etc/excision-mail/excision-mail.ini',
                    dest='config_file',
                    help='alternative configuration file')
parser.add_argument('-d',
                    type=str,
                    default='WARN',
                    dest='debug_level',
                    choices=['DEBUG', 'INFO', 'WARN', 'ERROR', 'CRIT'],
                    help='debug output level')
parser.add_argument('-p',
                    dest='prompt_passwd',
                    action='store_true',
                    help='ignore password in config and prompt for password')
parser.add_argument('-u',
                    dest='prompt_user',
                    action='store_true',
                    help='ignore user in config and prompt for user')

subparsers = parser.add_subparsers(dest='command')

account_info_p = subparsers.add_parser(
    'account-info', help='get information about a user/alias')
account_info_p.add_argument('account',
                            type=str,
                            help='user/alias whose information to query')

alias_add_p = subparsers.add_parser('alias-add', help='add a new alias')
alias_add_p.add_argument('alias', type=str, help='alias email address')

alias_allow_p = subparsers.add_parser('alias-allow',
                                      help='allow user to use an alias')
alias_allow_p.add_argument('user', type=str, help='user email address')
alias_allow_p.add_argument('alias', type=str, help='alias email address')

alias_delete_p = subparsers.add_parser('alias-delete', help='delete an alias')
alias_delete_p.add_argument('alias', type=str, help='alias to delete')

alias_deny_p = subparsers.add_parser('alias-deny',
                                     help='remove an alias from a user')
alias_deny_p.add_argument('user', type=str, help='user email address')
alias_deny_p.add_argument('alias', type=str, help='alias email address')

alias_disable_p = subparsers.add_parser('alias-disable',
                                        help='disable an alias')
alias_disable_p.add_argument('alias', type=str, help='alias to disable')

alias_enable_p = subparsers.add_parser('alias-enable',
                                        help='enable an alias')
alias_enable_p.add_argument('alias', type=str, help='alias to enable')

change_passwd_p = subparsers.add_parser('change-passwd',
                                        help='change password for a user')
change_passwd_p.add_argument('user',
                             type=str,
                             help='user whose password to change')

check_conf_p = subparsers.add_parser(
    'check-conf', help='check and validate the configuration file')

pgp_setup_p = subparsers.add_parser('pgp-setup',
                                    help='setup PGP WKD and WKS folders')

user_add_p = subparsers.add_parser('user-add', help='add a new user')
user_add_p.add_argument('user', type=str, help='user to add')

user_delete_p = subparsers.add_parser('user-delete', help='delete a user')
user_delete_p.add_argument('user', type=str, help='user to delete')

user_disable_p = subparsers.add_parser('user-disable', help='disable a user')
user_disable_p.add_argument('user', type=str, help='user to disable')

user_enable_p = subparsers.add_parser('user-enable', help='enable a user')
user_enable_p.add_argument('user', type=str, help='user to enable')

zone_check_p = subparsers.add_parser('zone-check',
                                     help='check for DNS records in knot-dns')
zone_check_p.add_argument('domain',
                          type=str,
                          help='domain to check records of')

zone_setup_p = subparsers.add_parser(
    'zone-setup', help='add needed DNS records for a zone in knot-dns')
zone_setup_p.add_argument('domain',
                          type=str,
                          help='domain for which to add records')

commands: typing.Dict[str, typing.Callable] = {}

commands['account-info'] = account_info

commands['alias-add'] = alias_add
commands['alias-allow'] = alias_allow
commands['alias-delete'] = alias_delete
commands['alias-deny'] = alias_deny
commands['alias-disable'] = alias_disable
commands['alias-enable'] = alias_enable

commands['change-passwd'] = change_passwd

commands['pgp-setup'] = pgp_setup

commands['user-add'] = user_add
commands['user-delete'] = user_delete
commands['user-disable'] = user_disable
commands['user-enable'] = user_enable

commands['zone-check'] = zone_check
commands['zone-setup'] = zone_setup

if __name__ == '__main__':
    args = parser.parse_args()

    levels = {
        'DEBUG': logging.DEBUG,
        'INFO': logging.INFO,
        'WARN': logging.WARNING,
        'ERROR': logging.ERROR,
        'CRIT': logging.CRITICAL
    }

    logging.basicConfig(level=levels[args.debug_level],
                        style='{',
                        format='{asctime} {levelname: >10}: {message}')

    if not (exists(args.config_file) and Path(args.config_file).is_file()):
        logging.critical('Config file "%s" does not exist', args.config_file)
        sys.exit(1)

    config = configparser.ConfigParser()
    try:
        config.read(args.config_file)
        if 'excision-mail' not in config.sections():
            logging.critical(
                'Config file "%s" does not have "[excision-mail]" section',
                args.config_file)
            sys.exit(1)
    except Exception as expt:
        logging.critical('Could not read config file "%s": %s',
                         args.config_file, str(expt))
        sys.exit(1)

    config = dict(config.items('excision-mail'))

    try:
        check_conf(config)
    except Exception as expt:
        logging.critical('Could not validate config file "%s": %s',
                         args.config_file, str(expt))
        sys.exit(1)

    if args.command == 'check-conf' or args.command == None:
        sys.exit(0)

    if args.prompt_user or 'ldap_user' not in config.keys():
        config['ldap_user'] = input('LDAP Username:')

    if args.prompt_passwd or 'ldap_passwd' not in config.keys():
        config['ldap_passwd'] = getpass('LDAP Password:')

    config.update(vars(args))
    try:
        commands[args.command](**config)
    except RedundantOperation:
        logging.warning('Redundant command')
    except Exception as expt:
        logging.critical('Could not run the command "%s": %s', args.command,
                         str(expt))
        sys.exit(1)
