#!/usr/bin/env python3

import argparse
import configparser
import logging
import sys
import typing
from getpass import getpass
from os.path import exists
from pathlib import Path

from excision_mail.config import check_conf
from excision_mail.gpg import ensure_gpg
from excision_mail.user import (account_info, add_alias, add_user, allow_alias,
                                change_passwd, delete_alias, delete_user,
                                remove_alias)
from excision_mail.zone import check_zone, ensure_zone

parser = argparse.ArgumentParser(
    description='Tools to manage the Excision Mail system.',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-c',
                    type=str,
                    default='/etc/excision-mail.conf',
                    dest='config_file',
                    help='alternative configuration file')
parser.add_argument('-d',
                    type=str,
                    default='WARN',
                    dest='debug_level',
                    choices=['DEBUG', 'INFO', 'WARN', 'ERROR', 'CRIT'],
                    help='debug output level')
parser.add_argument('-p',
                    dest='prompt_passwd',
                    action='store_true',
                    help='ignore password in config and prompt for password')
parser.add_argument('-u',
                    dest='prompt_user',
                    action='store_true',
                    help='ignore user in config and prompt for user')

subparsers = parser.add_subparsers(dest='command')

check_conf_p = subparsers.add_parser(
    'check-conf', help='check and validate the configuration file')

add_user_p = subparsers.add_parser('add-user', help='add a new user')
add_user_p.add_argument('user', type=str, help='user to add')

add_alias_p = subparsers.add_parser('add-alias',
                                    help='add a new alias')
add_alias_p.add_argument('alias', type=str, help='alias email address')

allow_alias_p = subparsers.add_parser('allow-alias',
                                      help='allow user to use an alias')
allow_alias_p.add_argument('user', type=str, help='user email address')
allow_alias_p.add_argument('alias', type=str, help='alias email address')

change_passwd_p = subparsers.add_parser('change-passwd',
                                        help='change password for a user')
change_passwd_p.add_argument('user',
                             type=str,
                             help='user whose password to change')

delete_user_p = subparsers.add_parser('delete-user', help='delete a user')
delete_user_p.add_argument('user', type=str, help='user to delete')

delete_alias_p = subparsers.add_parser('delete-alias', help='delete an alias')
delete_alias_p.add_argument('alias', type=str, help='alias to delete')

remove_alias_p = subparsers.add_parser('remove-alias', help='remove an alias from a user')
remove_alias_p.add_argument('user', type=str, help='user email address')
remove_alias_p.add_argument('alias', type=str, help='alias email address')

account_info_p = subparsers.add_parser(
    'account-info', help='get information about a user/alias')
account_info_p.add_argument('-v',
                            dest='verbose',
                            action='store_true',
                            help='print all information for the account')
account_info_p.add_argument('account',
                            type=str,
                            help='user/alias whose information to query')

check_zone_p = subparsers.add_parser('check-zone',
                                     help='check for DNS records in knot-dns')
check_zone_p.add_argument('domain',
                          type=str,
                          help='domain to check records of')

ensure_zone_p = subparsers.add_parser(
    'ensure-zone', help='add needed DNS records for a zone in knot-dns')
ensure_zone_p.add_argument('domain',
                           type=str,
                           help='domain for which to add records')

ensure_gpg_p = subparsers.add_parser('ensure-gpg',
                                     help='setup GPG WKD and WKS folders')

commands: typing.Dict[str, typing.Callable] = {}

commands['add-user'] = add_user
commands['add-alias'] = add_alias
commands['allow-alias'] = allow_alias
commands['remove-alias'] = remove_alias
commands['change-passwd'] = change_passwd
commands['delete-user'] = delete_user
commands['delete-alias'] = delete_alias
commands['account-info'] = account_info

commands['check-zone'] = check_zone
commands['ensure-zone'] = ensure_zone

commands['ensure-gpg'] = ensure_gpg

if __name__ == '__main__':
    args = parser.parse_args()

    levels = {
        'DEBUG': logging.DEBUG,
        'INFO': logging.INFO,
        'WARN': logging.WARNING,
        'ERROR': logging.ERROR,
        'CRIT': logging.CRITICAL
    }

    logging.basicConfig(level=levels[args.debug_level],
                        style='{',
                        format='{asctime} {levelname: >10}: {message}')

    if not (exists(args.config_file) and Path(args.config_file).is_file()):
        logging.critical('Config file "%s" does not exist', args.config_file)
        sys.exit(1)

    config = configparser.ConfigParser()
    try:
        config.read(args.config_file)
        if 'excision-mail' not in config.sections():
            logging.critical(
                'Config file "%s" does not have "[excision-mail]" section',
                args.config_file)
            sys.exit(1)
    except Exception as expt:
        logging.critical('Could not read config file "%s": %s',
                         args.config_file, str(expt))
        sys.exit(1)

    config = dict(config.items('excision-mail'))

    if args.prompt_user or 'ldap_user' not in config.keys():
        config['ldap_user'] = input('LDAP Username:')

    if args.prompt_passwd or 'ldap_passwd' not in config.keys():
        config['ldap_passwd'] = getpass('LDAP Password:')

    try:
        check_conf(config)
    except Exception as expt:
        logging.critical('Could not validate config file "%s": %s',
                         args.config_file, str(expt))
        sys.exit(1)

    if args.command == 'check-conf':
        sys.exit(0)

    try:
        commands[args.command](config=config, **vars(args))
    except Exception as expt:
        logging.critical('Could not run the command "%s": %s', args.command,
                         str(expt))
        sys.exit(1)
